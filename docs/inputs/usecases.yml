usecases:
  SkySiege Security Assessments:
    description: |
      SkySiege is a cybersecurity technology firm that provides Cloud Vulnerability Assessments and Automated Penetration Testing services that a delivered the same day. The PDF reports generated by SkySiege are fed data from SkySiege's custom scanning tools which is used as input files into HTML templates populated by Jinny.

      As this is all managed at a CLI level without the need for a full Jinja environment, the reports are created in a single command creating PDFs within seconds. The commands are no more complex than the examples shown in this documentation.

      The team at SkySiege were kind enough to provide some examples of Jinny's custom filters and globals that are used in SkySiege reports. These code snippets are provided below!

      You can get a sample of a SkySiege report from their <a href="https://skysiege.net/sample">sample page</a> or you can get more details on SkySiege services at <a href="https://skysiege.net">skysiege.net</a>

    code: |
      # SkySiege reports utilise SVGs for logos such as cloud provider services
      # Using the file_content filter lets an SVG be loaded in a similar manner to a JSX component
      <div class="absolute p-1 h-12 w-12 fill-white top-2">
        {{ (path.templatedir + '../aws/' + svc + '.html') | file_content }}
      </div>

      # Some reports can be hundreds of pages. SkySiege also has a number of evolving tests
      # Jinny's raise_exception global ensures that reports with bad data don't ever get sent to clients
      {% else %}
        {{ raise_exception("Vulnerability " + vuln.Name + " has an unknown criticality - " + vuln.Criticality) }}
      {% endif %}

      # As the reports are compiled to HTML the newlinetr filter is invaluable for translating breaks into strings with new lines
      <p>{{ vuln.Description | newlinetr }}</p>

      # For SkySiege reports to remain accessible and to reduce the blast radius on reports, SkySiege offers both censored and uncensored reports
      # That way the technical team can have one report and non-technical teams can review a report without the technical details containing vulnerable infrastructure
      # The censor filter is used to make censored reports possible
      {% if censor is defined and (censor == true or censor == "true") %}
        <div class="truncate text-sm font-medium text-gray-800 censorResource">- {{ violation.uniqueId[-12:] | censor(except_end=3) }}</div>
      {% endif %}

